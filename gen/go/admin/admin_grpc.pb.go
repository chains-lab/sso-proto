// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin/admin.proto

package admin

import (
	context "context"
	session "github.com/chains-lab/sso-proto/gen/go/session"
	user "github.com/chains-lab/sso-proto/gen/go/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminPanelService_CreateUserByAdmin_FullMethodName     = "/admin.AdminPanelService/CreateUserByAdmin"
	AdminPanelService_GetUserByAdmin_FullMethodName        = "/admin.AdminPanelService/GetUserByAdmin"
	AdminPanelService_GetSessionByAdmin_FullMethodName     = "/admin.AdminPanelService/GetSessionByAdmin"
	AdminPanelService_GetSessionsByAdmin_FullMethodName    = "/admin.AdminPanelService/GetSessionsByAdmin"
	AdminPanelService_DeleteSessionsByAdmin_FullMethodName = "/admin.AdminPanelService/DeleteSessionsByAdmin"
)

// AdminPanelServiceClient is the client API for AdminPanelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminPanelServiceClient interface {
	CreateUserByAdmin(ctx context.Context, in *CreateUserByAdminRequest, opts ...grpc.CallOption) (*user.User, error)
	GetUserByAdmin(ctx context.Context, in *GetUserByAdminRequest, opts ...grpc.CallOption) (*user.User, error)
	GetSessionByAdmin(ctx context.Context, in *GetSessionByAdminRequest, opts ...grpc.CallOption) (*session.Session, error)
	GetSessionsByAdmin(ctx context.Context, in *GetSessionsByAdminRequest, opts ...grpc.CallOption) (*session.SessionsList, error)
	DeleteSessionsByAdmin(ctx context.Context, in *DeleteSessionsByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminPanelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelServiceClient(cc grpc.ClientConnInterface) AdminPanelServiceClient {
	return &adminPanelServiceClient{cc}
}

func (c *adminPanelServiceClient) CreateUserByAdmin(ctx context.Context, in *CreateUserByAdminRequest, opts ...grpc.CallOption) (*user.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(user.User)
	err := c.cc.Invoke(ctx, AdminPanelService_CreateUserByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) GetUserByAdmin(ctx context.Context, in *GetUserByAdminRequest, opts ...grpc.CallOption) (*user.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(user.User)
	err := c.cc.Invoke(ctx, AdminPanelService_GetUserByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) GetSessionByAdmin(ctx context.Context, in *GetSessionByAdminRequest, opts ...grpc.CallOption) (*session.Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(session.Session)
	err := c.cc.Invoke(ctx, AdminPanelService_GetSessionByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) GetSessionsByAdmin(ctx context.Context, in *GetSessionsByAdminRequest, opts ...grpc.CallOption) (*session.SessionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(session.SessionsList)
	err := c.cc.Invoke(ctx, AdminPanelService_GetSessionsByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) DeleteSessionsByAdmin(ctx context.Context, in *DeleteSessionsByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminPanelService_DeleteSessionsByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServiceServer is the server API for AdminPanelService service.
// All implementations must embed UnimplementedAdminPanelServiceServer
// for forward compatibility.
type AdminPanelServiceServer interface {
	CreateUserByAdmin(context.Context, *CreateUserByAdminRequest) (*user.User, error)
	GetUserByAdmin(context.Context, *GetUserByAdminRequest) (*user.User, error)
	GetSessionByAdmin(context.Context, *GetSessionByAdminRequest) (*session.Session, error)
	GetSessionsByAdmin(context.Context, *GetSessionsByAdminRequest) (*session.SessionsList, error)
	DeleteSessionsByAdmin(context.Context, *DeleteSessionsByAdminRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminPanelServiceServer()
}

// UnimplementedAdminPanelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminPanelServiceServer struct{}

func (UnimplementedAdminPanelServiceServer) CreateUserByAdmin(context.Context, *CreateUserByAdminRequest) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserByAdmin not implemented")
}
func (UnimplementedAdminPanelServiceServer) GetUserByAdmin(context.Context, *GetUserByAdminRequest) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAdmin not implemented")
}
func (UnimplementedAdminPanelServiceServer) GetSessionByAdmin(context.Context, *GetSessionByAdminRequest) (*session.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByAdmin not implemented")
}
func (UnimplementedAdminPanelServiceServer) GetSessionsByAdmin(context.Context, *GetSessionsByAdminRequest) (*session.SessionsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsByAdmin not implemented")
}
func (UnimplementedAdminPanelServiceServer) DeleteSessionsByAdmin(context.Context, *DeleteSessionsByAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionsByAdmin not implemented")
}
func (UnimplementedAdminPanelServiceServer) mustEmbedUnimplementedAdminPanelServiceServer() {}
func (UnimplementedAdminPanelServiceServer) testEmbeddedByValue()                           {}

// UnsafeAdminPanelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServiceServer will
// result in compilation errors.
type UnsafeAdminPanelServiceServer interface {
	mustEmbedUnimplementedAdminPanelServiceServer()
}

func RegisterAdminPanelServiceServer(s grpc.ServiceRegistrar, srv AdminPanelServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminPanelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminPanelService_ServiceDesc, srv)
}

func _AdminPanelService_CreateUserByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).CreateUserByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_CreateUserByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).CreateUserByAdmin(ctx, req.(*CreateUserByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_GetUserByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).GetUserByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_GetUserByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).GetUserByAdmin(ctx, req.(*GetUserByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_GetSessionByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).GetSessionByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_GetSessionByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).GetSessionByAdmin(ctx, req.(*GetSessionByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_GetSessionsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).GetSessionsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_GetSessionsByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).GetSessionsByAdmin(ctx, req.(*GetSessionsByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_DeleteSessionsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).DeleteSessionsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_DeleteSessionsByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).DeleteSessionsByAdmin(ctx, req.(*DeleteSessionsByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanelService_ServiceDesc is the grpc.ServiceDesc for AdminPanelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminPanelService",
	HandlerType: (*AdminPanelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserByAdmin",
			Handler:    _AdminPanelService_CreateUserByAdmin_Handler,
		},
		{
			MethodName: "GetUserByAdmin",
			Handler:    _AdminPanelService_GetUserByAdmin_Handler,
		},
		{
			MethodName: "GetSessionByAdmin",
			Handler:    _AdminPanelService_GetSessionByAdmin_Handler,
		},
		{
			MethodName: "GetSessionsByAdmin",
			Handler:    _AdminPanelService_GetSessionsByAdmin_Handler,
		},
		{
			MethodName: "DeleteSessionsByAdmin",
			Handler:    _AdminPanelService_DeleteSessionsByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
