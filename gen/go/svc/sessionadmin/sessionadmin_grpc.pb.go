// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/sessionadmin/sessionadmin.proto

package sessionadmin

import (
	context "context"
	session "github.com/chains-lab/sso-proto/gen/go/svc/session"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SessionAdminService_GetSessionByAdmin_FullMethodName     = "/sessionadmin.SessionAdminService/GetSessionByAdmin"
	SessionAdminService_GetSessionsByAdmin_FullMethodName    = "/sessionadmin.SessionAdminService/GetSessionsByAdmin"
	SessionAdminService_DeleteSessionsByAdmin_FullMethodName = "/sessionadmin.SessionAdminService/DeleteSessionsByAdmin"
)

// SessionAdminServiceClient is the client API for SessionAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionAdminServiceClient interface {
	GetSessionByAdmin(ctx context.Context, in *GetSessionByAdminRequest, opts ...grpc.CallOption) (*session.Session, error)
	GetSessionsByAdmin(ctx context.Context, in *GetSessionsByAdminRequest, opts ...grpc.CallOption) (*session.SessionsList, error)
	DeleteSessionsByAdmin(ctx context.Context, in *DeleteSessionsByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sessionAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionAdminServiceClient(cc grpc.ClientConnInterface) SessionAdminServiceClient {
	return &sessionAdminServiceClient{cc}
}

func (c *sessionAdminServiceClient) GetSessionByAdmin(ctx context.Context, in *GetSessionByAdminRequest, opts ...grpc.CallOption) (*session.Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(session.Session)
	err := c.cc.Invoke(ctx, SessionAdminService_GetSessionByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionAdminServiceClient) GetSessionsByAdmin(ctx context.Context, in *GetSessionsByAdminRequest, opts ...grpc.CallOption) (*session.SessionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(session.SessionsList)
	err := c.cc.Invoke(ctx, SessionAdminService_GetSessionsByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionAdminServiceClient) DeleteSessionsByAdmin(ctx context.Context, in *DeleteSessionsByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionAdminService_DeleteSessionsByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionAdminServiceServer is the server API for SessionAdminService service.
// All implementations must embed UnimplementedSessionAdminServiceServer
// for forward compatibility.
type SessionAdminServiceServer interface {
	GetSessionByAdmin(context.Context, *GetSessionByAdminRequest) (*session.Session, error)
	GetSessionsByAdmin(context.Context, *GetSessionsByAdminRequest) (*session.SessionsList, error)
	DeleteSessionsByAdmin(context.Context, *DeleteSessionsByAdminRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSessionAdminServiceServer()
}

// UnimplementedSessionAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionAdminServiceServer struct{}

func (UnimplementedSessionAdminServiceServer) GetSessionByAdmin(context.Context, *GetSessionByAdminRequest) (*session.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByAdmin not implemented")
}
func (UnimplementedSessionAdminServiceServer) GetSessionsByAdmin(context.Context, *GetSessionsByAdminRequest) (*session.SessionsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsByAdmin not implemented")
}
func (UnimplementedSessionAdminServiceServer) DeleteSessionsByAdmin(context.Context, *DeleteSessionsByAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionsByAdmin not implemented")
}
func (UnimplementedSessionAdminServiceServer) mustEmbedUnimplementedSessionAdminServiceServer() {}
func (UnimplementedSessionAdminServiceServer) testEmbeddedByValue()                             {}

// UnsafeSessionAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionAdminServiceServer will
// result in compilation errors.
type UnsafeSessionAdminServiceServer interface {
	mustEmbedUnimplementedSessionAdminServiceServer()
}

func RegisterSessionAdminServiceServer(s grpc.ServiceRegistrar, srv SessionAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedSessionAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SessionAdminService_ServiceDesc, srv)
}

func _SessionAdminService_GetSessionByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServiceServer).GetSessionByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdminService_GetSessionByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServiceServer).GetSessionByAdmin(ctx, req.(*GetSessionByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionAdminService_GetSessionsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServiceServer).GetSessionsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdminService_GetSessionsByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServiceServer).GetSessionsByAdmin(ctx, req.(*GetSessionsByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionAdminService_DeleteSessionsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServiceServer).DeleteSessionsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdminService_DeleteSessionsByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServiceServer).DeleteSessionsByAdmin(ctx, req.(*DeleteSessionsByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionAdminService_ServiceDesc is the grpc.ServiceDesc for SessionAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sessionadmin.SessionAdminService",
	HandlerType: (*SessionAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionByAdmin",
			Handler:    _SessionAdminService_GetSessionByAdmin_Handler,
		},
		{
			MethodName: "GetSessionsByAdmin",
			Handler:    _SessionAdminService_GetSessionsByAdmin_Handler,
		},
		{
			MethodName: "DeleteSessionsByAdmin",
			Handler:    _SessionAdminService_DeleteSessionsByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/sessionadmin/sessionadmin.proto",
}
